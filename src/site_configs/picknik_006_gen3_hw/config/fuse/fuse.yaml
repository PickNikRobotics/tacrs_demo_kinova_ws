# this yaml file is adapted from `fuse_simple_tutorial.yaml`
state_estimator:
  ros__parameters:
    # Fixed-lag smoother configuration
    optimization_frequency: 100.0
    transaction_timeout: 0.01
    lag_duration: 0.01

    # all our sensors will be using this motion model
    motion_models:
      3d_motion_model:
        type: fuse_models::Omnidirectional3D

    3d_motion_model:
      # x, y, z, roll, pitch, yaw, x_vel, y_vel, z_vel, roll_vel, pitch_vel, yaw_vel, x_acc, y_acc, z_acc
      # use high values for the acceleration process noise because we aren't measuring the applied forces
      process_noise_diagonal:
        [
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
          0.01,
        ]

    sensor_models:
      initial_localization_sensor:
        type: fuse_models::Omnidirectional3DIgnition
        motion_models: [3d_motion_model]
        ignition: true
      transform_sensor:
        type: fuse_models::TransformSensor
        motion_models: [3d_motion_model]

    initial_localization_sensor:
      publish_on_startup: true
      # x, y, z, roll, pitch, yaw, x_vel, y_vel, z_vel, roll_vel, pitch_vel, yaw_vel, x_acc, y_acc, z_acc
      initial_state:
        [
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
        ]
      initial_sigma:
        [
          0.1,
          0.1,
          0.1,
          0.1,
          0.1,
          0.1,
          0.1,
          0.1,
          0.1,
          0.1,
          0.1,
          0.1,
          0.1,
          0.1,
          0.1,
        ]

    transform_sensor:
      # fuse expects frames named target_frame_[transform of interest]
      # we use a static transform publisher (see fuse.launch.py) to publish the april tag offsets to the target frame
      # the target frame is the frame that we wish to estimate the state of
      # the target frame should be the center of mass of the object for optimal performance, as the motion model assumes that it is operating on the center of mass of the object
      # the april tag (`satellite_tag_x`) will be a descendent of the estimation frame (`servicer_camera_optical_frame`) in the tf tree
      # thus, we need a different leaf in the tf tree to represent each satellite tag's correspondence to the target frame
      # transforms: ['satellite_tag_2901']
      transforms:
        [
          "satellite_tag_2901",
          "satellite_tag_2902",
          "satellite_tag_2903",
          "satellite_tag_2904",
        ]

      # this frame is the frame that we are actually estimating
      # fuse will publish an odom from the `estimation_frame` to this frame (and optionally a tf, too)
      target_frame: "target_frame"

      base_frame: "world"

      # this is the frame that all transforms should be parented to for fuse to use as a measurement
      # thus a measurement will be a tf from `estimation_frame` to any frame in `transforms` (see above)
      estimation_frames:
        ["zed_left_camera_optical_frame", "zed_right_camera_optical_frame"]
      position_dimensions: ["x", "y", "z"]
      orientation_dimensions: ["roll", "pitch", "yaw"]
      # TODO(anyone): set these empirically (collect data and estimate covariances) instead of just with arbitrary values
      pose_covariance:
        [0.15, 0.15, 0.15, 0.5, 0.5, 0.5,
        # second estimation frame
         0.15, 0.15, 0.15, 0.5, 0.5, 0.5]

    # this publishes our estimated odometry
    publishers:
      filtered_publisher:
        type: fuse_models::Odometry3DPublisher

    # the configuration of our output publisher
    filtered_publisher:
      topic: "odom_filtered"
      # this should be the same as `target_frame` from `transform_sensor` above
      base_link_frame_id: "target_frame"

      # this should be the same as `base_link_frame_id` above
      base_link_output_frame_id: "target_frame"

      # this should typically just be `odom``
      odom_frame_id: "odom"

      # this should be the same as `estimation_frame` in `transform_sensor` above
      map_frame_id: "world"
      # this should be the same as `map_frame_id`
      world_frame_id: "world"

      # optionally publish a tf
      publish_tf: true

      # how often to publish our estimates
      publish_frequency: 100.0

      # without this, our estimate won't be updated without a measurement
      predict_to_current_time: true
